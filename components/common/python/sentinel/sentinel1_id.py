from datetime import datetime
from os.path import basename
from re import RegexFlag
import re

class Sentinel1Id(object):
    '''
    Contains the different components of a Sentinel-1 product ID.
    See https://sentinel.esa.int/web/sentinel/user-guides/sentinel-1-sar/naming-conventions

    E.g., the following filename S1A_IW_GRDH_1SDV_20210412T151111_20210412T151136_037419_046917_218A.SAFE
    Identifies a GRD product acquired at High resolution by Sentinel-1A on the 12th of April, 2021 at 15:11:11.
    It was acquired during absolute Orbit 37419, and processed with PDGS Processing Baseline 02.04.

    :param full_id: full product ID
    :param mission: "S1A" or "S1B"
    :param mode: "S[1-6]", "IW", "EW", "WV"
    :param product_type: "SLC", "GRD" or "OCN"
    :param resolution_class: "F" full, "H" high, "M" medium
    :param product_level: "1" or "2"
    :param product_class: "S" standard, "A" annotation
    :param polarisation: "SH", "SV", "DH", "DV"
    :param start_time: (datetime) datat sensing start time
    :param stop_time: (datetime) datat sensing stop time
    :param absolute_orbit: The absolute orbit number at product start time (OOOOOO) will be in the range 000001-999999.
    :param mission_take_id: The mission data-take identifier (DDDDDD) will be in the range 000001-FFFFFF.
    :param product_unique_id: The product unique identifier (CCCC) is a hexadecimal string generated by computing CRC-16 on the manifest file using CRC-CCITT.
    '''

    def __init__(self, product_path):
        '''
        Constructor from a Sentinel-1 product path on the DIAS.

        :param l1c_path: e.g. /eodata/.../S1A_IW_GRDH_1SDV_20210412T151111_20210412T151136_037419_046917_218A.SAFE
        '''

        # Extract filename from full path if necessary
        product_basename = basename(product_path)

        # Regex and datetime formats
        datetime_regex = r'(\d{4}\d{2}\d{2}T\d{2}\d{2}\d{2})'
        datetime_strptime = '%Y%m%dT%H%M%S'

        # Build and match the regular expression
        # MMM_BB_TTTR_LFPP_YYYYMMDDHHMMSS_YYYYMMDDHHMMSS_OOOOOO_DDDDDD_CCCC.SAFE
        # Use parenthesis to match the substrings.
        # TODO fix mission parsing (S1C|S1D) migth arrive in the future
        regex = (r''
                 '(S1A|S1B)_' +
                 '(S1|S2|S3|S4|S5|S6|IW|EW|WV)_' +
                 '(SLC|GRD|OCN)(F|H|M)_' +
                 '(1|2)(S|A)(SH|SV|DH|DV)_' +
                 datetime_regex + '_' +
                 datetime_regex + '_' +
                 r'(\d{6})_' +
                 r'([A-Z0-9]{6})_' +
                 r'([A-Z0-9]{4})' +
                 '.SAFE'
                 )
        result = re.match(regex, product_basename, RegexFlag.IGNORECASE)

        # Check result
        if (not result) or (len(result.groups()) != 12):
            raise Exception(
                'Sentinel-1 product ID: %s\n'
                'Does not match regular expression: %s' % (product_basename, regex))

        # Remove '.SAFE' extension
        full_id = product_basename[:-len('.SAFE')]
        # Init class parameters
        self.full_id = full_id
        self.mission = result.group(1)
        self.mode = result.group(2)
        self.product_type = result.group(3)
        self.resolution_class = result.group(4)
        self.processing_level = result.group(5)
        self.product_class = result.group(6)
        self.polarisation = result.group(7)
        self.start_time = datetime.strptime(result.group(8), datetime_strptime)
        self.stop_time = datetime.strptime(result.group(9), datetime_strptime)
        self.absolute_orbit = result.group(10)
        self.mission_take_id = result.group(11)
        self.product_unique_id = result.group(12)

